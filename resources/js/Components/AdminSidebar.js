import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import NavLink from "./NavLink";
import { BookHeart, BookUser, Brain, BugIcon, ChevronDown, CircleUser, ClipboardList, HandCoins, Handshake, LayoutDashboard, Leaf, Menu, Moon, NotebookTextIcon, Power, Sun, Tornado, TreePalm, User2, Weight, Wheat, } from "lucide-react";
import { Link } from "@inertiajs/react";
import logo from "../Assets/logo_final.png";
import { useTheme } from "@/ThemeContext";
export default function AdminSidebar({ user, expanded, setExpanded }) {
    const [isAllocationOpen, setIsAllocationOpen] = useState(JSON.parse(localStorage.getItem("isAllocationOpen") || "false"));
    const [isCommodityOpen, setIsCommodityOpen] = useState(JSON.parse(localStorage.getItem("isCommodityOpen") || "false"));
    const [isRecommendationOpen, setIsRecommendationOpen] = useState(false);
    const [isCropDamagesOpen, setIsCropDamagesOpen] = useState(JSON.parse(localStorage.getItem("isCropDamagesOpen") || "false"));
    const [isUserOpen, setIsUserOpen] = useState(JSON.parse(localStorage.getItem("isUserOpen") || "false"));
    const [isFarmerOpen, setIsFarmerOpen] = useState(JSON.parse(localStorage.getItem("isFarmerOpen") || "false"));
    const handleToggle = () => {
        setIsAllocationOpen((prev) => !prev);
    };
    const handleCommodityToggle = () => {
        setIsCommodityOpen((prev) => !prev);
    };
    const handleRecommendationToggle = () => {
        setIsCommodityOpen((prev) => !prev);
    };
    useEffect(() => {
        localStorage.setItem("isFarmerOpen", JSON.stringify(isFarmerOpen));
    }, [isFarmerOpen]);
    useEffect(() => {
        localStorage.setItem("isCropDamagesOpen", JSON.stringify(isCropDamagesOpen));
    }, [isCropDamagesOpen]);
    useEffect(() => {
        localStorage.setItem("isAllocationOpen", JSON.stringify(isAllocationOpen));
    }, [isAllocationOpen]);
    useEffect(() => {
        localStorage.setItem("isCommodityOpen", JSON.stringify(isCommodityOpen));
    }, [isCommodityOpen]);
    useEffect(() => {
        localStorage.setItem("isUserOpen", JSON.stringify(isUserOpen));
    }, [isUserOpen]);
    const toggleMenu = () => {
        setExpanded((prev) => {
            const newState = !prev;
            localStorage.setItem("sidebarExpanded", JSON.stringify(newState));
            return newState;
        });
    };
    const handleFarmerToggle = () => {
        setIsFarmerOpen((prev) => {
            const newState = !prev;
            localStorage.setItem("farmerOpen", JSON.stringify(newState));
            return newState;
        });
    };
    const { theme, toggleTheme } = useTheme();
    return (_jsxs("div", { className: `fixed z-20 p-5 overflow-x-auto bg-white dark:bg-[#0D1A25] rounded-[1rem] ml-3 shadow ${expanded ? "w-[265px]" : "w-[90px]"}`, children: [_jsxs("div", { className: "flex gap-2", children: [_jsx("button", { onClick: toggleMenu, className: "p-2", children: _jsx(Menu, { className: "w-6 h-6 dark:text-white" }) }), _jsx("div", { className: "w-full flex justify-center p-4", children: _jsx("img", { src: logo, alt: "logo", width: "150px" }) })] }), expanded ? (_jsx("div", { className: "flex items-center justify-center p-4", children: _jsxs("div", { className: `relative w-[90px] h-12 flex items-center rounded-full p-1 cursor-pointer transition ${theme === "dark" ? "bg-yellow-400" : "bg-gray-300"}`, onClick: toggleTheme, children: [_jsx("div", { className: `w-10 h-10 bg-white rounded-full shadow-md transform transition ${theme === "dark"
                                ? "translate-x-10"
                                : "translate-x-0"}` }), _jsx("span", { className: "absolute flex justify-center items-center left-3 text-xs text-black dark:text-white", children: theme === "dark" ? (_jsx(_Fragment, { children: _jsx(Sun, { className: "w-5 h-5 text-white" }) })) : (_jsx(Sun, { className: "w-5 h-5 text-yellow-500" })) }), _jsx("span", { className: "absolute right-4 text-xs text-black dark:text-white", children: theme === "dark" ? (_jsx(_Fragment, { children: _jsx(Moon, { className: "w-5 h-5 text-blue-950" }) })) : (_jsx(Moon, { className: "w-5 h-5 text-blue-350" })) })] }) })) : (_jsx("button", { onClick: toggleTheme, className: "p-2 mt-2 border-[2px] rounded-full mb-4 dark:bg-yellow-400 transition", children: theme === "dark" ? (_jsx(Sun, { className: "w-6 h-6" })) : (_jsx(Moon, { className: "w-6 h-6 " })) })), _jsx("div", { className: "overflow-auto h-[420px] ", children: _jsxs("ul", { children: [expanded ? (_jsx("span", { className: "ml-2 mb-4 text-sm font-semibold text-slate-500 dark:text-white", children: "Main" })) : (""), _jsx("li", { className: "text-m mb-5 ", children: _jsx(NavLink, { href: route("dashboard"), active: route().current("dashboard"), children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500 hover:text-green-500", children: [_jsx(LayoutDashboard, { size: 20 }), expanded && _jsx("span", { children: "Dashboard" })] }) }) }), expanded ? (_jsx("span", { className: "ml-2 mb-4 text-sm font-semibold text-slate-600 dark:text-white", children: "List" })) : (""), _jsx("li", { className: "text-sm cursor-pointer font-medium leading-5 p-2", onClick: () => setIsUserOpen((prevState) => !prevState), children: _jsxs("div", { className: "flex gap-2 justify-between font-medium leading-5", children: [_jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(User2, { size: 20 }), expanded && (_jsx("span", { className: "font-medium leading-5", children: "User" }))] }), expanded ? (_jsx("div", { className: "flex-end dark:text-white", children: _jsx(ChevronDown, { size: 20 }) })) : ("")] }) }), isUserOpen && (_jsx("ul", { className: `relative left-[1rem] transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden inline-block ${isUserOpen
                                ? "max-h-40 opacity-100"
                                : "max-h-0 opacity-0"}`, children: _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("users.index"), active: route().current("users.index"), children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(CircleUser, { size: 20 }), expanded && _jsx("span", { children: "List" })] }) }) }) })), _jsx("li", { className: "text-sm cursor-pointer font-medium leading-5 p-2", onClick: () => setIsFarmerOpen((prevState) => !prevState), children: _jsxs("div", { className: "flex gap-2 justify-between font-medium leading-5", children: [_jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Wheat, { size: 20 }), expanded && (_jsx("span", { className: "font-medium leading-5", children: "Farmer" }))] }), expanded ? (_jsx("div", { className: "flex-end dark:text-white", children: _jsx(ChevronDown, { size: 20 }) })) : ("")] }) }), isFarmerOpen && (_jsxs("ul", { className: `relative left-[1rem] transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden inline-block ${isFarmerOpen
                                ? "max-h-40 opacity-100"
                                : "max-h-0 opacity-0"}`, children: [_jsx("li", { className: "border-l-2 dark:text-white", children: _jsx(NavLink, { href: route("farm.index"), active: route().current("farm.index"), children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(ClipboardList, { size: 20 }), expanded && _jsx("span", { children: "Farms" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("farmers.index"), active: route().current("farmers.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(BookUser, { size: 20 }), expanded && _jsx("span", { children: "List" })] }) }) })] })), _jsx("li", { className: "text-sm cursor-pointer font-medium leading-5 p-2", onClick: () => setIsCommodityOpen((prevState) => !prevState), children: _jsxs("div", { className: "flex gap-2 justify-between font-medium leading-5", children: [_jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Leaf, { size: 20 }), expanded && (_jsx("span", { className: "font-medium leading-5", children: "Commodity" }))] }), expanded ? (_jsx("div", { className: "flex-end dark:text-white", children: _jsx(ChevronDown, { size: 20 }) })) : ("")] }) }), isCommodityOpen && (_jsxs("ul", { className: `relative left-[1rem] transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden inline-block ${isCommodityOpen
                                ? "max-h-40 opacity-100"
                                : "max-h-0 opacity-0"}`, children: [_jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("commodity.index"), active: route().current("commodity.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(TreePalm, { size: 20 }), expanded && _jsx("span", { children: "Category" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("commodity.list.index"), active: route().current("commodity.list.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(NotebookTextIcon, { size: 19 }), expanded && _jsx("span", { children: "List" })] }) }) })] })), _jsx("li", { className: "text-sm cursor-pointer font-medium leading-5 p-2", onClick: () => setIsAllocationOpen((prevState) => !prevState), children: _jsxs("div", { className: "flex gap-2 justify-between", children: [_jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Handshake, { size: 20 }), expanded && _jsx("span", { children: "Allocation" })] }), expanded ? (_jsx("div", { className: "flex-end dark:text-white", children: _jsx(ChevronDown, { size: 20 }) })) : ("")] }) }), isAllocationOpen && (_jsxs("ul", { className: `relative left-[1rem] transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden ${isAllocationOpen
                                ? "max-h-40 opacity-100"
                                : "max-h-0 opacity-0"}`, children: [_jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("allocation.type.index"), active: route().current("allocation.type.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(HandCoins, { size: 20 }), expanded && _jsx("span", { children: "Type" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("funding.index"), active: route().current("funding.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(BookHeart, { size: 19 }), expanded && _jsx("span", { children: "Source" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("identifier.index"), active: route().current("identifier.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Weight, { size: 19 }), expanded && _jsx("span", { children: "Identifier" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("allocations.index"), active: route().current("allocations.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(NotebookTextIcon, { size: 19 }), expanded && _jsx("span", { children: "Records" })] }) }) })] })), _jsx("li", { className: "text-sm cursor-pointer font-medium leading-5 p-2", onClick: () => setIsCropDamagesOpen((prevState) => !prevState), children: _jsxs("div", { className: "flex gap-2 justify-between", children: [_jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(BugIcon, { size: 20 }), expanded && _jsx("span", { children: "Damages" })] }), expanded ? (_jsx("div", { className: "flex-end dark:text-white", children: _jsx(ChevronDown, { size: 20 }) })) : ("")] }) }), isCropDamagesOpen && (_jsxs("ul", { className: `relative left-[1rem] transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden ${isCropDamagesOpen
                                ? "max-h-40 opacity-100"
                                : "max-h-0 opacity-0"}`, children: [_jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("crop.damage.show"), active: route().current("crop.damage.show"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Tornado, { size: 20 }), expanded && _jsx("span", { children: "Type" })] }) }) }), _jsx("li", { className: "border-l-2", children: _jsx(NavLink, { href: route("crop.damages.index"), active: route().current("crop.damages.index"), className: "border-l-[1px] ", children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(NotebookTextIcon, { size: 19 }), expanded && _jsx("span", { children: "Records" })] }) }) })] })), _jsx("br", {}), expanded ? (_jsx("span", { className: "ml-2 mb-4 text-sm font-semibold text-slate-500 dark:text-white", children: "Reports" })) : (""), _jsx("li", { className: "text-m ", onMouseEnter: () => setIsRecommendationOpen(true), onMouseLeave: () => setIsRecommendationOpen(false), onClick: handleRecommendationToggle, children: _jsx(NavLink, { href: route("recommendations.index"), active: route().current("recommendations.index"), children: _jsxs("div", { className: "flex gap-2 dark:text-white dark:hover:text-green-500", children: [_jsx(Brain, { size: 20 }), expanded && (_jsx("span", { className: "dark:text-white dark:hover:text-green-500", children: "Recommendation" }))] }) }) }), _jsx("br", {})] }) }), _jsxs("div", { className: " w-[230px] text-ellipsis", children: [expanded ? (_jsx("span", { className: "inline-flex", children: _jsxs(Link, { href: route("profile.edit"), className: "inline-flex dark:border-green-600 border-[2px] items-center py-4 px-3 text-sm leading-4 font-medium rounded-[1rem] text-gray-500 bg-transparent hover:text-gray-700 focus:outline-none transition ease-in-out duration-150", children: [_jsx("img", { src: "https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/10-1024.png", width: "35px", height: "35px", className: "mr-1 rounded-lg" }), _jsxs("div", { className: "text-left mx-2", children: [_jsxs("div", { className: "flex gap-2 ", children: [_jsx("span", { className: "capitalize text-[12px] font-semibold  text-black dark:text-green-600", children: user.firstname }), _jsx("span", { className: "capitalize dark:text-green-600 font-semibold text-[12px] text-black", children: user.lastname })] }), _jsx("div", { children: _jsxs("span", { className: "capitalize dark:text-white font-regular text-[11px]", children: ["(", user.role, ")"] }) })] })] }) })) : (_jsx("span", { children: _jsx(Link, { href: route("profile.edit"), className: "inline-flex dark:border-green-600 border-[2px] items-center py-2 px-2 text-sm leading-4 font-medium rounded-lg text-gray-500 bg-transparent hover:text-gray-700 focus:outline-none transition ease-in-out duration-150", children: _jsx(User2, { size: 13, className: "dark:text-green-600" }) }) })), expanded ? (_jsx("div", { className: "flex gap-2 justify-center content-center", children: _jsx(Link, { href: route("logout"), method: "post", as: "button", children: _jsxs("span", { className: "inline-flex mt-3 gap-1 text-[10px] font-semibold hover:bg-red-700 hover:text-white text-red-600 border p-2 rounded-lg shadow-lg  ", children: [_jsx(Power, { size: 13 }), "LOG OUT"] }) }) })) : (_jsx("div", { className: "flex", children: _jsx(Link, { href: route("logout"), method: "post", as: "button", children: _jsx("span", { className: "inline-flex mt-3 gap-1 text-[10px] font-semibold hover:bg-red-700 hover:text-white text-red-600 border p-2 rounded-lg shadow-lg  ", children: _jsx(Power, { size: 13 }) }) }) }))] })] }));
}
